This member describes the WAC (World According to Conley) method for
implementing TSO and ISPF.  This is a simple, straightforward method
that allows you to quickly and easily implement ISPF, or streamline an
existing ISPF implementation.  Complicated LOGON CLISTs, LOGON PROCs,
and ISPF selection menus are replaced with a simple set of building
blocks which get you going quickly.  You can add complexity if you want,
but you won't need to.

WAC has only one prerequisite.  It assumes that you have good TSO USERID
naming standards, and that all users are segregated into appropriate
groups based on their job responsibilities.  Without TSO USERID's
clearly delineated by job responsibility, WAC will not yield the desired
results.

Before we continue, let me clarify that WAC is a separate concept from
Dynamic ISPF.  They dovetail together, but it is important to remember
that Dynamic ISPF is the methodology that removes datasets from the
LOGON PROC.  ISPF apps run by using REXX execs and the TSO/ISPF dynamic
allocation facilities to allocate ISPF libraries and invoke ISPF
appliations.  WAC is a methodology for setting up the overall TSO LOGON
environment.  WAC is based on using a minimal LOGON CLIST and the TSO
LOGON PROC names to completely create the users TSO environment.  Other
issues such as security, using command tables instead of panels, etc.
are all described in the Dynamic ISPF methodology.

So let's get started.  Here are the sample members that make up WAC:

$READWAC - This member.
ALLUSER  - Sample panel of company-wide ISPF options for all users.
IKJTSO00 - WAC sample of TSO PARMLIB member for HELP datasets
ISR@PRIM - WAC sample of ISPF Primary Option Menu with A & Z options
TSOLOGON - WAC sample of a LOGON CLIST
OY59638  - IBM APAR showing why LOGON parm should always be a CLIST
TSOAPPL  - WAC sample of TSO LOGON PROC for Applications
TSOAPPL# - WAC sample of ISPF selection menu for Applications
TSOSYSP  - WAC sample of TSO LOGON PROC for SysProgs
TSOSYSP# - WAC sample of ISPF selection menu for SysProgs
UMISPFP  - WAC sample of ISPF usermod for ISR@PRIM

To install WAC, perform the following steps:

1.  Create a LOGON proc for each group based on the PROC samples in
    TSOAPPL and TSOSYSP.
2.  Create a LOGON CLIST based on the sample in LOGON, and execute it
    in the PARM= statement for the IKJEFT01 step in the LOGON PROCs
    created in step 1 (you may need to change the ISPF profile dataset
    name to match your standards).
3.  Customize and run the UMISPFP usermod sample to customize ISR@PRIM
    (or if you prefer, just slap the ISR@PRIM sample into your ISPPLIB
    concatenation).
4.  Install the ALLUSER sample panel for company-wide ISPF applications
    (or whichever name you may choose for this option) into your ISPPLIB
    concatenation.
5.  Rename the TSOAPPL# and TSOSYSP# samples by removing the '#' and
    install them into your ISPPLIB concatenation.  Customize the panels
    with the ISPF applications that will be invoked by that group.
6.  Pull the plug on your old ISPF methods.
7.  Hit yourself in the head and wonder why you didn't do this sooner.

Following is some detailed documentation regarding the WAC samples.

Let's start with the TSO LOGON PROCs.  There are two samples, TSOAPPL
for application programmers, and TSOSYSP for system programmers.  You'll
notice that each PROC is identical, differing only in the member name
and STEPNAME on the IKJEFT01 step.  The STEPNAME will be stored in the
&ZLOGON ISPF variable.  We will use &ZLOGON later to determine a
group-specific ISPF application menu.  You will need to create a LOGON
PROC for each group in your shop.

In these LOGON PROC samples, take note of the minimal dataset
allocations.  All you should have here are system-specific datasets and
ISPF datasets.  If you do not have a system-wide CLIST library (like
SYS2.ISPCLIB), allocate one and place it in the SYSPROC concatenation of
all your LOGON PROCs.  This is the library that will hold the Dynamic
ISPF REXX Driver EXECs.

You may notice the lack of a SYSHELP concatenation.  The SYSHELP
datasets are defined in the IKJTSO00 member of PARMLIB, and will be used
for all TSO sessions.  There is a sample IKJTSO00 member to show you how
to allocate the SYSHELP datasets in the PARMLIB member.  This method has
two advantages:  the SYSHELP datasets are all defined in a central
location; and the SYSHELP datasets are only allocated if the user enters
the HELP command, saving resources.  The disadvantage is for sites
wishing to control access to the datasets in the SYSHELP concatenation.
If your site does not want the user to access TCP/IP help, for example,
then you would add the SYSHELP DD to the LOGON proc, and exclude the
SEZAHELP dataset from SYSHELP.

The next piece is the TSO logon EXEC member TSOLOGON.  In the past,
logon EXEC's were not possible due to limitations documented in APAR
OY59638.  Ken Burrow at Computer Sciences Corporation developed the
technique of using the REXX QUEUE (or PUSH) command to have ISPF,
TSOLIB, etc.  execute from the TSO READY prompt.  That circumvents
OY59638, which finally allows us to jettison CLISTs (YES!!) for LOGON
processing.  Thank you Ken!

Note what you do not see in the LOGON EXEC.  No freeing and
reallocating datasets.  No use of CONCAT or other tools to concatenate
datasets.  No allocating user ISPF datasets.  If you still need to
create a personal ISPF environment for your users, introduce them to
ISPF option 6, and show them the sample exec in member PERSISPF.  They
can customize PERSISPF and invoke it from ISPF option 6 to create their
own ISPF environment.  The only limitation with this method is lack of
support for ISPF applications requiring STEPLIB.  If the user's personal
ISPF environment requires STEPLIB support (tell them to use SELECT PGM
instead of CALL/LINK/ATTACH/XCTL ;-), they will either need to use a
Dynamic STEPLIB product, or they'll have to exit ISPF, enter the TSOLIB
command for the STEPLIB from the READY prompt, re-enter ISPF, then
re-execute PERSISPF from option 6 (see how much easier it would be to
use SELECT PGM?).  These comments are only directed towards new ISPF
application development.  Unfortunately we are stuck with a lot of
legacy dialog code that uses the CALL/LINK/ATTACH/XCTL interface.  But
that's no excuse for not making sure new dialog development uses
SELECT PGM instead of CALL/LINK/ATTACH/XCTL.

Next up is the Primary Option Menu.  Two samples are provided, ISR@PRIM
for the sloppy SysProgs who don't believe in SMP/E, and usermod UMISPFP
for SysProgs who like to do things the right way.  Both samples show the
addition of an "A" option for ALL Users, a company-wide option menu for
ISPF applications to be accessed by everyone, and a "Z" option menu for
ISPF applications to be accessed by that group (based on the &ZLOGON
variable from the LOGON PROC step name).  A common modification is to
change the "A" option to the first letter of the company name (e.g. "P"
for Pinnacle Consulting Group, Inc., or "W" for Widgets, Inc.).  You'll
often also see an "S" option for SDSF or another spool viewer product.

Lastly, you have the sample panel members ALLUSER, TSOAPPL#, and
TSOSYSP#.  These samples show how to code the "A" and "Z" option menus.
For TSOAPPL# or TSOSYSP#, remove the '#' sign before placing the members
in your ISPPLIB concatenation.
